2.1 Write a java program to print person details in the format as shown below: 
2.3: Refer the class diagram given below and createa personclass. 
Create default and parameterized constructor for Person class. 
 
Also Create “PersonMain.java” program and write code for following operations:
 a) Create an object of Person class and specify person details through constructor. 
b) Display the details in the format  given in Lab assignment 2.1 

package anurag;

public class Person {
	String Fname;
	String Lname;
	 char gender;
	 int age;
	 float weight;
	 
	Person()
	{
		Fname="mahesh";
		Lname="shegu";
		gender='m';
		age=22;
		weight=76.3f;
	}
	
	Person(String Fname,String Lname,char gender,int age,float weight)
	{
		this.Fname=Fname;
		this.Lname=Lname;
		this.gender=gender;
		this.age=age;
		this.weight=weight;
	}

	public String getLname() {
		return Lname;
	}
	public void setLname(String lname) {
		Lname = lname;
	}
	public String getFname() {
		return Fname;
	}
	public void setFname(String fname) {
		Fname = fname;
	}
	public char getGender() {
		return gender;
	}
	public void setGender(char gender) {
		this.gender = gender;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public float getWeight() {
		return weight;
	}
	public void setWeight(float weight) {
		this.weight = weight;
	}
}
package anurag;

public class personain {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Person p=new Person();
		System.out.println("Fname is"+p.Fname);
		System.out.println("Lname is"+p.Lname);
		System.out.println("genger is"+p.gender);
		System.out.println("age is"+p.age);
		System.out.println("weight is"+p.weight);
		Person p2=new Person("karthik","shegu",'m',20,67.8f);
		System.out.println("Fname is"+p2.getFname());
		System.out.println("Lname is"+p2.getLname());
		System.out.println("genger is"+p2.getGender());
		System.out.println("age is"+p2.getAge());
		System.out.println("weight is"+p2.getWeight());
	}

}

2.2:  Write a program to accept a number from user as a command line argument and check whether the given number is positive or negative number
package anurag;
public class CheckNumber {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int a=Integer.parseInt(args[0]);
		if(a>=0)
			System.out.println("+ve int");
		else
			System.out.println("-ve int");
		

	}
}
2.4: Modify Lab assignment 2.3 to accept phone number of a person. Create a newmethod to implement the same and also define method for displaying persondetails. 
package anurag;

class Person5
{
		private String Fname;
		private String Lname;
		private char gender;
		private int age;
		private double weight;
		private long number;


		Person5(String Fname,String Lname,
			char gender,
			int age,
			double weight,long number){
			 this.Fname=Fname;
			 this.Lname=Lname;
			 this.gender=gender;
			 this.age=age;
			 this.weight=weight;
			 this.number=number;
		}
		
		public long getNumber() {
			return number;
		}

		public void setNumber(long number) {
			this.number = number;
		}

		public String getFname() {
			return Fname;
		}
		public void setFname(String fname) {
			this.Fname = fname;
		}
		public String getLname() {
			return Lname;
		}
		public void setLname(String lname) {
			this.Lname = lname;
		}
		public char getGender() {
			return gender;
		}
		public void setGender(char gender) {
			this.gender = gender;
		}
		public int getAge() {
			return age;
		}
		public void setAge(int age) {
			this.age = age;
		}
		public double getWeight() {
			return weight;
		}

		
		public void setWeight(double weight) {
			this.weight = weight;
		}
	 
	}
	public class GetSet {
		
			public static void main(String[] args){
				Person5 p=new Person5("Divya", "Bhavitha",'F',20,85.55,994831599) ;
				
				System.out.println("First name:"+p.getFname());
				System.out.println("Last name:"+p.getLname());
				System.out.println("Age:"+p.getAge());
				System.out.println("Gender:"+p.getGender());
				System.out.println("Weight:"+p.getWeight());	
				System.out.println("number:"+p.getNumber());
			}
			
			
	}



2.5: Modify the above program, to accept only ‘M’ or ‘F’ as gender field values. Use Enumeration for implementing the same. 
package anurag;

public class gender {

	/**
	 * @param args
	 */
	String Fname;
	String Lname;
	 gender1 gender;
	 int age;
	 float weight;
	 String phno;
	 enum gender1 {M,m,F,f };
	 
	
	gender()
	{
		Fname="mahesh";
		Lname="shegu";
		age=22;
		gender=gender1.m;
		weight=76.3f;
		phno="9912446939";
	}
	
	gender(String Fname,String Lname,gender1 gender,int age,float weight,String phno)
	{
		this.Fname=Fname;
		this.Lname=Lname;
		this.gender=gender;
		this.age=age;
		this.weight=weight;
		this.phno=phno;
	}

	public String getLname() {
		return Lname;
	}
	public void setLname(String lname) {
		Lname = lname;
	}
	public String getFname() {
		return Fname;
	}
	public void setFname(String fname) {
		Fname = fname;
	}
	public gender1 getGender() {
		return gender;
	}
	public gender1 setGender(gender1 gender) {
		return this.gender = gender;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public float getWeight() {
		return weight;
	}
	public void setWeight(float weight) {
		this.weight = weight;
	}
	public String getPhno() {
		return phno;
	}


	public void setPhno(String phno) {
		this.phno = phno;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		gender p=new gender();
		System.out.println("Fname is"+p.Fname);
		System.out.println("Lname is"+p.Lname);
		System.out.println("gender is"+p.gender);
		System.out.println("age is"+p.age);
		System.out.println("weight is"+p.weight);
		System.out.println("phno:"+p.phno);
		gender p2=new gender("karthik","shegu",gender1.m,20,67.8f,"8328299822");
		System.out.println("Fname is"+p2.getFname());
		System.out.println("Lname is"+p2.getLname());
		System.out.println("gender is"+p2.getGender());
		System.out.println("age is"+p2.getAge());
		System.out.println("weight is"+p2.getWeight());
		System.out.println("phno:"+p2.getPhno());
	}

}


3.1: Create a method which can perform a particular String operation based on the user’s choice. The method should accept the String object and the user’s choice and return the output of the operation. Options are  Add the String to itself  Replace odd positions with #  Remove duplicate characters in the String  Change odd characters to upper case
package anurag;
import java.util.*;
public class userchoice1 {
		
		Scanner s =new Scanner(System.in);
		
		String name=s.nextLine();	
		int N=name.length();
		char array[]= new char[N];
		char array1[]=new char[N];
		char array2[]=new char[N];
		int i,j;
		
		void display()
		{
			System.out.println("1.Add to String itself");
			System.out.println("2.Replace odd positions with # ");
			System.out.println("3.Remove duplicate characters in the String ");
			System.out.println("4.Change odd characters to upper case ");
			int q=s.nextInt();
		switch(q)
		{
			case 1: 
			
						String concatedstring=name+name;
						System.out.println("concatedstring="+concatedstring);
						break;
					
			case 2: 
						for(int z=0,j=1,i=0;z<N;z++)
						{
							while(i<N)
							{
									array[i]='#';
									i=i+2;
									break;
							}
							while(j<N)
							{
								array[j]=name.charAt(j);
								j=j+2;
								break;
							}		
						}
						for(int k=0;k<N;k++)
						{
							System.out.print(array[k]);
			
						}		
						break;

			case 3: 
						int m=1;
						array1[0]=name.charAt(0);
						for(i=1;i<N;i++)
						{
							j=0;
							int count=0;
							while(j<i)
							{
								if(name.charAt(i)!=name.charAt(j))
								{
									count++;		
								}
								j++;
							}
							if(count==i)
							{
								array1[m]=name.charAt(i);
								m++;
							}
						}
						for(int k=0;k<N;k++)
						{
							System.out.print(array1[k]);
			
						}	
			
						break;
			case 4: 
						for(i=0;i<N;i++)
						{
							if(i%2==0)
							{
								array2[i]=(char)(name.charAt(i)-32);
							}
							else
							{
								array2[i]=name.charAt(i);
							}
						}
						for(int k=0;k<N;k++)
						{
							System.out.print(array2[k]);
				
						}	
						break;
			default :System.out.println("enter correct number------ ");
			break;
		}
		
		}
		
			

		public static void main(String[] args) {
			
			System.out.println("enter the string");
			userchoice1 obj=new userchoice1();
			obj.display();
		}

	}

3.2: Create a method that accepts a String and checks if it is a positive string. A string is considered a positive string, if on moving from left to right each character in the String comes after the previous characters in the Alphabetical order.For Example: ANT is a positive String (Since T comes after N and N comes after A). The method should return true if the entered string is positive
package anurag;
import java.util.Arrays;
import java.util.Scanner;
	public class Check {
	static boolean AlphabeticalOrder(String s) {
		
			int l=s.length();
			char ch[]=new char[l];
			for(int i=0;i<l;i++) {
				ch[i]=s.charAt(i);
			}
			Arrays.sort(ch) ; 
			for(int i=0;i<l;i++)                                                          
				if(ch[i]!=s.charAt(i))
					return false;
				
					return true;		
	 }
		public static void main(String[] args) {
			// TODO Auto-generated method 
			Scanner sc=new Scanner(System.in);
			System.out.println("enter a string");
			String s=sc.next();
			if(AlphabeticalOrder(s))
				System.out.println("true");
			else
				System.out.println("false");
				sc.close();
			
			
		}

	}


3.3: Create a method to accept date and print the duration in days, months and years with regards to current system date
package anurag;

import java.time.*;
public class DateDuration {
		
	         public void duration()
	         {
	        	 LocalDate pdate = LocalDate.of(2014,12,11);
	 	        LocalDate now = LocalDate.now();
	 	 
	 	        Period dur = Period.between(pdate, now);
	 	       System.out.printf("\nDuration is %d years, %d months and %d days old\n\n",dur.getYears(), dur.getMonths(), dur.getDays());
	 }
	           public static void main(String[] args)
		    {
		        DateDuration d = new DateDuration();
		        d.duration();
		     
		     
		    }
	}


3.4: Revise exercise 3.3 to accept two LocalDates and print the duration between dates in days, months and years
package anurag;
import java.util.*;
import java.time.*;
public class differdate {
	public static void main(String[] args)
    {
        LocalDate pdate = LocalDate.of(2012, 01, 01);
        LocalDate now = LocalDate.now();
 
        Period diff = Period.between(pdate, now);
 
     System.out.printf("\nDifference is %d years, %d months and %d days old\n\n", 
                    diff.getYears(), diff.getMonths(), diff.getDays());
  }
}
3.5: Create a method to accept product purchase date and warrantee period (in terms of months and years). Print the date on which warrantee of product expires. 
package anurag;

import java.text.DateFormat;

import java.text.SimpleDateFormat;

import java.time.LocalDate;

import java.time.Period;

import java.time.format.DateTimeFormatter;

import java.util.Scanner;

 

public class date {

 

              public static void main(String[] args) {

                           // TODO Auto-generated method stub

                           System.out.println("ENTER DATE IN FORMAT YYYY,MM,DD");

                           Scanner sc=new Scanner(System.in);

                           int year =sc.nextInt();

                           int month =sc.nextInt();

                           int dayOfMonth =sc.nextInt();

                           LocalDate loc=LocalDate.of(year, month, dayOfMonth);

                           System.out.println("enter expiry in format YY,MM");

                           int year1 =sc.nextInt();

                           int month1 =sc.nextInt();

                           LocalDate l=loc.plusYears(year1);

                           LocalDate l1=loc.plusMonths(month1);

                           //LocalDate lll=LocalDate.of(year1, month1, dayOfMonth);

              /*          System.out.println("enter other date");

                           int year1 =sc.nextInt();

                           int month1 =sc.nextInt();

                           int dayOfMonth1 =sc.nextInt();

                           LocalDate l=LocalDate.of(year1, month1, dayOfMonth1);

                           Period p=Period.between(loc, l);

                           System.out.println(l);

                           System.out.println("The difference of years"+p.getYears()+",months"+p.getMonths()+"days"+p.getDays());

                           */

int m=l.getMonthValue();

int n=l.getYear();

switch(m){

case 2:

              if(loc.getDayOfMonth()==29||loc.getDayOfMonth()==30||loc.getDayOfMonth()==31){

                           dayOfMonth=1;

                           m=3;

              }

              break;

case 4:

              if(loc.getDayOfMonth()==31){

                           dayOfMonth=1;

                           m=5;

              }

              break;

case 6:

              if(loc.getDayOfMonth()==31){

                           dayOfMonth=1;

                           m=7;

              }

              break;

case 9:

              if(loc.getDayOfMonth()==31){

                           dayOfMonth=1;

                           m=10;

              }

              break;

case 11:

              if(loc.getDayOfMonth()==31){

                           dayOfMonth=1;

                           m=12;

              }

              break;

}

LocalDate loc1=LocalDate.of(n, m, dayOfMonth);

System.out.println(loc1);

              }

 }



3.6: Create a method which accept zone id and print the current date and time with respect to given zone. (Hint: Few zones to test your code. America/New_York, Europe/London, Asia/Tokyo, US/Pacific, Africa/Cairo, Australia/Sydney etc.) 
 import java.time.LocalDateTime;

import java.time.ZoneId;

import java.util.Scanner;

 

public class ZonalTimes {

 

              public static void main(String[] args) {

                           // TODO Auto-generated method stub

                           System.out.println("Enter zone id in terms of Conteinent/Place");

Scanner sc=new Scanner(System.in);

String s=sc.next();

 

zoneid(s);

              }

              public static void zoneid(String s){

                           LocalDateTime l=LocalDateTime.now(ZoneId.of(s));

                           System.out.println(l);

              }

 

}


3.7: Modify Lab assignment 2.3 to perform following functionalities: a) Add a method called calculateAge which should accept person’s date of birth and calculate age of a person.  b) Add a method called getFullName(String firstName, String lastName) which should return full name of a person  Display person details with age and fullname. 
 package anurag;

	import java.util.Scanner;
	public  class Person37 {
	public String getFullName(String firstName,String lastname){
			String fullname=firstName+lastname;
			return fullname;
			
		}
		

		public static void main(String[] args) {
			//Person p=new Person("karthik","Gupta",'M');

			Scanner sc=new Scanner(System.in);
			Person37 P=new Person37();
			System.out.println("Enter first name");
			String firstName=sc.nextLine();
			System.out.println("Enter Second name");
			String lastName=sc.nextLine();
		   String result=P.getFullName(firstName,lastName);
		   System.out.println(result);
	        sc.close();
		}

	}


4.1: Refer the case study 1in Page No: 5 and create Account Class as shown below in class diagram. Ensure minimum balance of INR 500 in a bank account is available.
a) Create Account for smith with initial balance as INR 2000 and for Kathy with initial balance as 3000.(accNum should be auto generated). b) Deposit 2000 INR to smith account. c) Withdraw 2000 INR from Kathy account. d) Display updated balances in both the account. e) Generate toString() method
4.2: Extend the functionality through Inheritanceand polymorphism (Maintenance) 
Inherit two classes Savings Account and Current Account from account class. Implement the following in the respective classes. 
a) Savings Account a. Add a variable called minimum Balance and assign final modifier. b. Override method called withdraw (This method should check for minimum balance and allow withdraw to happen) 
 
b) Current Account a. Add a variable called overdraft Limit b. Overridemethod called withdraw (checks whether overdraft limit is reached and returns a boolean value accordingly)
package anurag;

class Person1 {
	private String namme;
	private float age;

	public String getNamme() {
		return namme;
	}

	public void setName(String name) {
		this.namme = name;
	}

	public float getAge() {
		return age;
	}

	public void setAge(float age) {
		this.age = age;
	}
}

abstract class Account {
	private static long count = 0;
	private long accNum;
	public double balance;
	private Person1 accHolder;

	public long getAccNum() {
		return accNum;
	}

	public void setAccNum(long accNum) {
		this.accNum = accNum;
	}

	public Person1 getAccHolder() {
		return accHolder;
	}

	public void setAccHolder(Person1 accHolder) {
		this.accHolder = accHolder;
	}

	public void setBalance(double balance) {
		this.balance = balance;
	}

	public void deposit(double amount) {
		balance += amount;
	}

	public abstract void withdraw(double amount);
	/*{
		balance -= amount;
	}*/

	public double getBalance() {
		return balance;
	}

	public Account() {
		accNum = ++count;
	}

	public String toString() {
		return "Account Holder name: " + this.accHolder.getNamme() + "\nAge: " + this.accHolder.getAge()
				+ "\nAccount Number: " + this.getAccNum() + " \nCurrent Balance: " + this.getBalance();
	}
}

class SavingsAccount extends Account {
	private final double minBalance = 1000;
	double bal;

	public void withdraw(double amount) {
		bal = super.getBalance();
		double bal1 = bal - amount;
		if (bal > minBalance && bal1 >= minBalance) {

			bal -= amount;
			super.setBalance(bal);
		} else {

			System.out.println(" You can withdraw upto  " + (bal - minBalance));
		}

	}
}

class CurrentAccount extends Account {
	public double overdraftLimit = -1000;
	double bal;

	public void withdraw(double amount) {
		bal = super.getBalance();
		double bal1 = bal - amount;
		if (bal > overdraftLimit && bal1 >= overdraftLimit) {

			bal -= amount;
			super.setBalance(bal);
			System.out.println("false");
		} else {

			System.out.println(" You can withdraw upto  " + (bal - overdraftLimit));
			System.out.println("overdraft amount reached");
		}

	}
}/*
class B extends Account{
	public void withdraw(double amount)
	{
		balance -=amount;
	}
}*/
public class Accountant extends Account{

	public static void main(String[] args) {
		Person1 p1 = new Person1();
		p1.setName("Smith");
		p1.setAge(30);
		Person1 p2 = new Person1();
		p2.setName("Kathy");
		p2.setAge(21);
		CurrentAccount smithAcc = new CurrentAccount();
		smithAcc.setAccHolder(p1);
		SavingsAccount kathyAcc = new SavingsAccount();
		kathyAcc.setAccHolder(p2);
		
		smithAcc.setBalance(2000);
		kathyAcc.setBalance(5000);
		smithAcc.deposit(2000);

		System.out.println("The updated smith account balance is " + smithAcc.getBalance());
		System.out.println("The updated kathy account balance is " + kathyAcc.getBalance());
		 kathyAcc.withdraw(2000);
		kathyAcc.withdraw(4500);
		 kathyAcc.withdraw(0);
		smithAcc.withdraw(6000);
		System.out.println(smithAcc.toString());
		System.out.println(kathyAcc.toString());

	}

	@Override
	public void withdraw(double amount) {
		// TODO Auto-generated method stub
		balance -=amount;
	}
}
5.1: Refer the case study 2 in page no: 5 and create an application for that requirement by creating packages and classes as given below: 
 
a) com.cg.eis.bean  In this package, create “Employee” class with different attributes such as id, name, salary, designation, insuranceScheme. 

package com.cg.eis.bean;

import com.cg.eis.exception.EmployeeException;

public class Employee {
	private int id;
	private String name, designation, insuranceScheme;
	private double salary;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDesignation() {
		return designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}

	public String getInsuranceScheme() {
		return insuranceScheme;
	}

	public void setInsuranceScheme(String insuranceScheme) {
		this.insuranceScheme = insuranceScheme;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) throws EmployeeException {
		if (salary < 3000) {
			EmployeeException e1 = new EmployeeException("Salary less than 3000");
			throw e1;
		} else {
			this.salary = salary;
		}
	}

}

 b) com.cg.eis.service   This package will contain code for services offered in Employee Insurance System. 
The service class will have one EmployeeService Interface and its corresponding implementation class. 

package com.cg.eis.service;

interface EmployeeService {
	String insuranceDetails(double salary, String designation);
}

public class EmployeeInsuranceScheme implements EmployeeService {

	@Override
	public String insuranceDetails(double salary, String designation) {
		if(salary>5000 && salary<20000 && designation.equals("System Associate"))
			return " Scheme C";
		else if(salary>=20000 && salary<40000 && designation.equals("Programmer"))
			return "Scheme B";
		else if(salary>=40000&& designation.equals("Manager"))
			return "Scheme A";
		else if(salary<5000 && designation.equals("Clerk"))
			return "No Scheme";
		return null;
	}

}
c) com.cg.eis.pl   This package will contain code for getting input from user, produce expected output to the user and invoke services offered by the system.  
 
The services offered by this application currently are: i) Get employee details from user. 
ii) Find the insurance scheme for an employee based on salary and designation.
iii) Display all the details of an employee
5.2: Use overrides annotation for the overridden methods available in a derived class of an interface of all the assignments
package com.cg.eis.exception;

public class EmployeeException extends RuntimeException {

	String message;

	public EmployeeException() {
			message = "";
		}

	public EmployeeException(String message) {
			this.message = message;
		}

	@Override
	public String toString() {
		return "[" + this.getClass().getName() + ":" + message + "]";
	}

	public String getMessage() {
		return super.getMessage();
	}

}

package com.cg.eis.pl;

import com.cg.eis.bean.*;
import com.cg.eis.exception.EmployeeException;
import com.cg.eis.service.*;
import java.util.*;

public class UserInput {

public static void main(String[] args) {
@SuppressWarnings("resource")
Scanner in = new Scanner(System.in);
System.out.println("Enter Details of Employee");
System.out.println("Enter ID Number");
int id = in.nextInt();
System.out.println("Enter Name");
String name = in.next();
System.out.println("Enter Designation Name (Programmer,System Associate,Manager,Clerk)");
String designation = in.next();
System.out.println("Enter salary");
double salary = in.nextDouble();
String insuranceScheme;

Employee e = new Employee();
e.setId(id);
e.setName(name);
e.setDesignation(designation);
// e.setSalary(salary);
EmployeeInsuranceScheme eis = new EmployeeInsuranceScheme();
insuranceScheme = eis.insuranceDetails(salary, designation);
e.setInsuranceScheme(insuranceScheme);
try {
e.setSalary(salary);
System.out.println("Employee id " + e.getId());
System.out.println("Employee Name " + e.getName());
System.out.println("Employee designation " + e.getDesignation());
System.out.println("Employee salary " + e.getSalary());
System.out.println("Employee insurance scheme " + e.getInsuranceScheme());
} catch (EmployeeException emp) {
System.out.println(emp.toString());
}

 System.out.println("Employee id "+ e.getId());
 System.out.println("Employee Name "+ e.getName());
 System.out.println("Employee designation "+ e.getDesignation());
 System.out.println("Employee salary "+ e.getSalary());
 System.out.println("Employee insurance scheme "+ e.getInsuranceScheme());

}

public static void checkSalary(double salary) throws EmployeeException {
if (salary < 3000) {
EmployeeException e = new EmployeeException("Salary less than 3000");
throw e;
}
}
}

6.1: Modify the Lab assignment 2.3 to validate the full name of an employee. Create and throw a user defined exception if firstName and lastName is blank. 


package anurag;

public class Person {
	String Fname;
	String Lname;
	 char gender;
	 int age;
	 float weight;
	 
	Person()
	{
		Fname="mahesh";
		Lname="shegu";
		gender='m';
		age=22;
		weight=76.3f;
	}
	
	Person(String Fname,String Lname,char gender,int age,float weight)
	{
		this.Fname=Fname;
		this.Lname=Lname;
		this.gender=gender;
		this.age=age;
		this.weight=weight;
	}

	public String getLname() {
		return Lname;
	}
	public void setLname(String lname) {
		Lname = lname;
	}
	public String getFname() {
		return Fname;
	}
	public void setFname(String fname) {
		Fname = fname;
	}
	public char getGender() {
		return gender;
	}
	public void setGender(char gender) {
		this.gender = gender;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public float getWeight() {
		return weight;
	}
	public void setWeight(float weight) {
		this.weight = weight;
	}
}
package anurag;

import java.util.Scanner;

public class personException {

	public static void main(String[] args) {
		// TODO Auto-generated method stub		
		Person p1 = new Person();
		System.out.println("Fname is : "+p1.Fname);
		System.out.println("Lname is : "+p1.Lname);
		System.out.println("gender is : "+p1.gender);
		System.out.println("age is : "+p1.age);
		System.out.println("weight is : "+p1.weight);
	
		Scanner sc = new Scanner(System.in);
		System.out.print("Please enter your first name : ");
		String fname = sc.nextLine();
		System.out.print("Please enter your last name : ");
		String lname = sc.nextLine();
	
		try
		{
			if((fname.equals("") && lname.equals("")))
				throw new NullPointerException("Null Entry");
			else
			{
				Person p2 = new Person(fname,lname,'m',20,67.8f);
				System.out.println("Fname is "+p2.getFname());
				System.out.println("Lname is "+p2.getLname());
				System.out.println("gender is "+p2.getGender());
				System.out.println("age is "+p2.getAge());
				System.out.println("weight is "+p2.getWeight());
			}
		}
		catch(NullPointerException e)
		{
			System.out.println("This field should not be empty..."+e.getMessage());
		}
	}	
}

6.2: Validate the age of a person in Lab assignment 4.2 and display proper message by using user defined exception. Age of a person should be above 15
class AgeException extends Exception{
public AgeException(String s) {

super(s);
}
}
class Person {
private String name;
private float age;
public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}

public float getAge() {
try {
if(age<15.0) {

throw new AgeException("Age should be greater than 15");
}
}catch(AgeException e) {
System.out.println(e);
}
return age;

}

public void setAge(float age) {
this.age = age;

}


}

abstract class Account extends Person {
private static long count = 0;
private long accNum;
private double balance;
private Person accHolder;

public long getAccNum() {
return accNum;
}

public void setAccNum(long accNum) {
this.accNum = accNum;
}

public Person getAccHolder() {
return accHolder;
}

public void setAccHolder(Person accHolder) {
this.accHolder = accHolder;
}

public void setBalance(double balance) {
this.balance = balance;
}

public void deposit(double amount) {
balance += amount;
}

public abstract void withdraw(double amount);
/*{
balance -= amount;
}
*/
public double getBalance() {
return balance;
}

public Account() {
accNum = ++count;
}


}

class SavingsAccount extends Account {
private final double minBalance = 1000;
double bal;

public void withdraw(double amount) {
bal = super.getBalance();
double bal1 = bal - amount;
if (bal > minBalance && bal1 >= minBalance) {

bal -= amount;
super.setBalance(bal);
} else {

System.out.println(" You can withdraw upto  " + (bal - minBalance));
}

}
}

class CurrentAccount extends Account {
public double overdraftLimit = -1000;
double bal;

public void withdraw(double amount) {
bal = super.getBalance();
double bal1 = bal - amount;
if (bal > overdraftLimit && bal1 >= overdraftLimit) {

bal -= amount;
super.setBalance(bal);
System.out.println("false");
} else {

System.out.println(" You can withdraw upto  " + (bal - overdraftLimit));
System.out.println("overdraft amount reached");
}

}
}

public class Acoounts{

public static void main(String[] args) {
Person p1 = new Person();
p1.setName("Smith");
p1.setAge(21);
Person p2 = new Person();
p2.setName("Kathy");
p2.setAge(21);
CurrentAccount smithAcc = new CurrentAccount();
smithAcc.setAccHolder(p1);
SavingsAccount kathyAcc = new SavingsAccount();
kathyAcc.setAccHolder(p2);
smithAcc.setBalance(2000);
kathyAcc.setBalance(5000);
smithAcc.deposit(2000);
System.out.println("The updated smith account balance is " + smithAcc.getBalance());
System.out.println("The updated kathy account balance is " + kathyAcc.getBalance());
kathyAcc.withdraw(2000);
kathyAcc.withdraw(4500);
 kathyAcc.withdraw();
smithAcc.withdraw(6000);
System.out.println(smithAcc.toString());
System.out.println(kathyAcc.toString());

}
}

6.3:  Modify the Lab assignment 5.1 to handle exceptions. Create an Exception class named as “EmployeeException”(User defined Exception) in a package named as “com.cg.eis.exception” and throw an exception if salary of an employee is below than 3000. Use Exception Handling mechanism to handle exception properly
package com.cg.eis.bean;

import com.cg.eis.exception.EmployeeException;

public class Employee {
	private int id;
	private String name, designation, insuranceScheme;
	private double salary;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDesignation() {
		return designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}

	public String getInsuranceScheme() {
		return insuranceScheme;
	}

	public void setInsuranceScheme(String insuranceScheme) {
		this.insuranceScheme = insuranceScheme;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) throws EmployeeException {
		if (salary < 3000) {
			EmployeeException e1 = new EmployeeException("Salary less than 3000");
			throw e1;
		} else {
			this.salary = salary;
		}
	}

}
package com.cg.eis.exception;

public class EmployeeException extends RuntimeException {

	String message;

	public EmployeeException() {
			message = "";
		}

	public EmployeeException(String message) {
			this.message = message;
		}

	@Override
	public String toString() {
		return "[" + this.getClass().getName() + ":" + message + "]";
	}

	public String getMessage() {
		return super.getMessage();
	}

}
package com.cg.eis.service;

interface EmployeeService {
	String insuranceDetails(double salary, String designation);
}

public class EmployeeInsuranceScheme implements EmployeeService {

	@Override
	public String insuranceDetails(double salary, String designation) {
		if(salary>5000 && salary<20000 && designation.equals("System Associate"))
			return " Scheme C";
		else if(salary>=20000 && salary<40000 && designation.equals("Programmer"))
			return "Scheme B";
		else if(salary>=40000&& designation.equals("Manager"))
			return "Scheme A";
		else if(salary<5000 && designation.equals("Clerk"))
			return "No Scheme";
		return null;
	}

}
package com.cg.eis.pl;

import com.cg.eis.bean.*;
import com.cg.eis.exception.EmployeeException;
import com.cg.eis.service.*;
import java.util.*;

public class UserInput {

public static void main(String[] args) {
@SuppressWarnings("resource")
Scanner in = new Scanner(System.in);
System.out.println("Enter Details of Employee");
System.out.println("Enter ID Number");
int id = in.nextInt();
System.out.println("Enter Name");
String name = in.next();
System.out.println("Enter Designation Name (Programmer,System Associate,Manager,Clerk)");
String designation = in.next();
System.out.println("Enter salary");
double salary = in.nextDouble();
String insuranceScheme;

Employee e = new Employee();
e.setId(id);
e.setName(name);
e.setDesignation(designation);
// e.setSalary(salary);
EmployeeInsuranceScheme eis = new EmployeeInsuranceScheme();
insuranceScheme = eis.insuranceDetails(salary, designation);
e.setInsuranceScheme(insuranceScheme);
try {
e.setSalary(salary);
System.out.println("Employee id " + e.getId());
System.out.println("Employee Name " + e.getName());
System.out.println("Employee designation " + e.getDesignation());
System.out.println("Employee salary " + e.getSalary());
System.out.println("Employee insurance scheme " + e.getInsuranceScheme());
} catch (EmployeeException emp) {
System.out.println(emp.toString());
}

 System.out.println("Employee id "+ e.getId());
 System.out.println("Employee Name "+ e.getName());
 System.out.println("Employee designation "+ e.getDesignation());
 System.out.println("Employee salary "+ e.getSalary());
 System.out.println("Employee insurance scheme "+ e.getInsuranceScheme());

}

public static void checkSalary(double salary) throws EmployeeException {
if (salary < 3000) {
EmployeeException e = new EmployeeException("Salary less than 3000");
throw e;
}
}
}
7.1: Write a program to store product names in a string array and sort strings available in an array
package anurag;

import java.util.Scanner;
//import java.util.*;
public class Sorting{
	/*public static void main(String[] args) {
		// TODO Auto-generated method stub
		 ArrayList<String> product = new ArrayList<String>(); 
		 product.add("wheat"); 
		 product.add("jowar"); 
		 product.add("maize"); 
		 product.add("ragi");
		 product.add("paddy");
         Collections.sort(product);
		 System.out.println(product); 
	}*/
	public static void main(String[] args)
    {
        int n;
        String temp;
        Scanner s = new Scanner(System.in);
        System.out.print("Enter number of items:");
        n = s.nextInt();
        String names[] = new String[n];
        Scanner s1 = new Scanner(System.in);
        System.out.println("Enter the product names :");
        for(int i = 0; i < n; i++)
        {
            names[i] = s1.nextLine();
        }
        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                if (names[i].compareTo(names[j])>0)
                {
                    temp = names[i];
                    names[i] = names[j];
                    names[j] = temp;
                }
            }
        }
        System.out.print("Names in Sorted Order:");
        for (int i = 0; i < n - 1; i++)
        {
            System.out.print(names[i] + ",");
        }
        System.out.print(names[n - 1]);
    }
}
7.2: Modify the above program to store product names in anArrayList, sort strings available in an arrayList and display the names using for-each loop
package anurag;

import java.util.*;
public class Sorting1{
	/*public static void main(String[] args) {
		// TODO Auto-generated method stub
		 ArrayList<String> product = new ArrayList<String>(); 
		 product.add("wheat"); 
		 product.add("jowar"); 
		 product.add("maize"); 
		 product.add("ragi");
		 product.add("paddy"); 
		 product.stream().sorted().forEach(System.out::println); 
	}*/
	public static void main(String[] args)
    {
        int n;
        Scanner s = new Scanner(System.in);
        System.out.print("Enter number of items:");
        n = s.nextInt();
        ArrayList<String> product = new ArrayList<String>();
        Scanner s1 = new Scanner(System.in);
        System.out.println("Enter the product names :");
        for(int i = 0; i < n; i++)
        {
        	product.add(s1.nextLine());
        }
        product.stream().sorted().forEach(System.out::println);
    }
}
7.3: Modify the lab assignment 5.1 to accept multiple employee details and store all employee objects in a HashMap. The functionalities need to be implemented are:   i) Add employee details to HashMap. ii) Accept insurance scheme from user and display employee details based on Insurance scheme iii) Delete an employee details from map. iv) Sort the employee details based on salary and display it. 
package anurag;

import java.util.HashMap;
import java.util.Scanner;

public class HashMapImpl {
	
	
	static int i=101;
	private int id;
    private	String fname;
	private String lname;
	private double salary;
	private String designation;
	private String insuranceScheme;
	
	
	public HashMapImpl(int id, String fname, String lname, double salary, String designation) {
		//super();
		this.id = id;
		this.fname = fname;
		this.lname = lname;
		this.salary = salary;
		this.designation = designation;
	//	this.insuranceScheme= insuranceScheme;
		i++;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		id = i;
	}
	public String getFname() {
		return fname;
	}
	public void setFname(String fname) {
		this.fname = fname;
	}
	public String getLname() {
		return lname;
	}
	public void setLname(String lname) {
		this.lname = lname;
	}
	public double getSalary() {
		return salary;
	}
	public void setSalary(double salary) {
		this.salary = salary;
	}
	public String getDesignation() {
		return designation;
	}
	public void setDesignation(String designation) {
		this.designation = designation;
	}
	public String getInsuranceScheme() {
		return insuranceScheme;
	}
	public void setInsuranceScheme(String insuranceScheme) {
	this.insuranceScheme =insuranceScheme;

	}
	@Override
	public String toString() {
		return "id=" + id + ", Name=" + fname+" "+lname + ", salary=" + salary + ", designation="
				+ designation ;
	}
	
	public void insurance() {
		// TODO Auto-generated method stub
		//Employee e = new Employee() ;
//		Scanner sc = new Scanner(System.in);
			String designation = getDesignation();
			double salary = getSalary();
	if(designation.equalsIgnoreCase("System Associate") && (salary>5000 && salary<20000))
	{
		setInsuranceScheme("SCHEME C");
	}
	else if(designation.equalsIgnoreCase("Programmer") && (salary>=20000 && salary<40000))
	{
		setInsuranceScheme("SCHEME B");
	}
	else if(designation.equalsIgnoreCase("Manager") && salary>=40000 )
	{
		 setInsuranceScheme("SCHEME A");
	}
	else if(designation.equalsIgnoreCase("Clerk") && salary<5000)
	{
		setInsuranceScheme("NO SCHEME");
		}
	}
	public void addElements(HashMap<String, HashMapImpl> list,HashMapImpl e)
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter key name");
		String s = sc.next();
		list.put(s,e);
		//sc.close();
	}
	public static void removeElement(HashMap<String,HashMapImpl> list,int id)
	{
		

		if(list.containsValue(id))
		{
			
			//list.remove()
		}
	}
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		
		HashMapImpl e1 = new HashMapImpl(i,"karthik","shegu",40000,"nager");
		HashMapImpl e2 = new HashMapImpl(i,"k","sh",20000,"mger");
		HashMapImpl e3 = new HashMapImpl(i,"d","kk",4000,"manag");
		HashMapImpl e4 = new HashMapImpl(i,"ie","iri",30000,"maer");
		HashMapImpl e5 = new HashMapImpl(i,"mahesh","ari",4000,"m");
		//int id, String fname, String lname, double salary, String designation
		HashMap<String,HashMapImpl> list = new HashMap<String,HashMapImpl>(); 
		e1.addElements(list, e1);
		e2.addElements(list, e2);
		e3.addElements(list, e3);
		e4.addElements(list, e4);
		e5.addElements(list, e5);
		//System.out.println(list.keySet());
		//System.out.println("Enter the id of employee you want to ");
		//int i = sc.nextInt();
		//removeElement(list,i);
		System.out.println(list);

		
		
		
		
	}

}

8.1: Write a program to read content from file, reverse the content and write the reversed content to the file. (Use Reader and Writer APIs).
package anurag;

import java.io.FileReader;
public class Number8
{
	   public static void main(String[] args)
	     {
	       try
	       {
	         FileReader fr = new FileReader("F:/cap/karthik.txt");
	         String str = "";
	         int ch;
	         while ((ch = fr.read()) != -1)
	         {
	        	 str += Character.toString((char) ch);
	         }
	         System.out.println("Original String : " + str);
	         StringBuilder sb = new StringBuilder(str);
	         System.out.println("Reverse order : " + sb.reverse());
	         fr.close();
	       }
	         catch(Exception e)
	       {
	             System.out.println("error"+e.getMessage());
	       }
	     }
}

8.2: Create a file named as “numbers.txt” which should contain numbers from 0 to 10 delimited by comma. Write a program to read data from numbers.txt using Scanner class API and display only even numbers in the console
package anurag;

import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;
public class Lab8_2 {

	public static void main(String[] args) throws IOException
	{
		FileReader fr = new FileReader("F:/cap/numbers.txt"); 
			  Scanner sc=new Scanner(fr);
			  while(sc.hasNext())
			  {
				  String str=sc.nextLine();
				  System.out.println(str);
				  String[] s=str.split(",");
				  int i=s.length;
				     int k[]=new int[i];
				     int j;
				     for(j=0;j<i;j++)
				     {
				    	 k[j]=Integer.parseInt(s[j]);
				    	 
				     }
				  //   System.out.println("Integer array:"+Arrays.toString(k));
				     System.out.println("even numbers:");
				     for(j=0;j<i;j++)
				     if(k[j]%2==0)
			    	 {
			    		 System.out.println(k[j]);
			    	 }
			  }
			  sc.close();     
	}
}
8.3: Enhance the lab assignment 6.3 by adding functionality in service class to write employee objects into a File. Also read employee details from file and display the same in console. Analyze the output of the program
package anurag;

import java.io.Serializable;

public class Employee implements Serializable{
	private int id;
	private String name;
	private double sal;
	private String designation;
	private String insurancescheme;
	
	Employee()
	{	
		id=101;
		name="karthik";
		sal=30000.0;
		designation="clerk";
		insurancescheme="no scheme";
		
	}
	Employee(int id, String name,double sal)
	{
		this.id=id;
		this.name=name;
		this.sal=sal;
		
	}
	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getSal() {
		return sal;
	}

	public void setSal(double sal) {
		this.sal = sal;
	}

	public String getDesignation() {
		return designation;
	}

	public void setDesignation(String designation) {
		this.designation = designation;
	}
	public String getInsurancescheme() {
		return insurancescheme;
	}
	public void setInsurancescheme(String ischeme) {
		this.insurancescheme = ischeme;
	}
	public void insurancescheme()
	{
		if(sal==0)
		{
			System.out.println("salary should not be empty");
		}
		else
		{
			if(sal>5000 && sal< 20000 )
			{
				setDesignation("System Associate");
				setInsurancescheme("Scheme C");
			}
			else if(sal>=20000 &&sal<40000)
			{
				setDesignation("Programmer");
				setInsurancescheme("Scheme B");
			}
			else if(sal>=40000)
			{
				setDesignation("Manager");
				setInsurancescheme("Scheme A");
			}
			else if(sal<5000)
			{
				setDesignation("clerk");
				setInsurancescheme("No Scheme");
			}
		}
	}
	
	
}


package anurag;

import java.io.*;

public class Objectfile8_3 {

	public static void main(String[] args)  throws Exception{
		
		       Objectfile8_3 objectIO = new Objectfile8_3();
		       Employee e = new Employee();
		       e.setId(1);
		       e.setName("karthik");
		       e.setSal(25000);
		       e.setDesignation("manager");
		       e.setInsurancescheme("A");
		       objectIO.WriteObjectToFile(e);
		      // System.out.println(e.toString());
		       objectIO.file1();
		      
		    }
		 
		    public  void WriteObjectToFile(Object emp) {
		 
		        try {
		 
		            FileOutputStream fileOut = new FileOutputStream("F://objectfile.txt");
		            ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);
		            objectOut.writeObject(emp);
		            objectOut.close();
		          
		            System.out.println("The Object  was succesfully written to a file");
		 
		        } catch (Exception ex) {
		            ex.printStackTrace();
		        }
		    }
		    
		    public void file1() throws Exception
		    {
		    	File f=new File("F://objectfile.txt");
		    	FileInputStream fr =new FileInputStream(f);
		    	ObjectInputStream ois=new ObjectInputStream(fr);
		    	//Employee emp= (Employee) new Employee();
		    	System.out.println(ois.readObject());
		    	
		    	
		    	/*int ch;
		    	while((ch=fr.read())!=-1)
		    	{
		    		System.out.print((char) ch);
		    	}*/
		    	
		    	
		    }
	}




9.2: Writing JUnit tests 
Consider the following Java program. Write tests for testing various methods in the class 
package junitproject;

class Date      
{  
	int intDay, intMonth, intYear;  
// Constructor 
	Date(int intDay, int intMonth, int intYear) 
	{
		this.intDay = intDay; this.intMonth = intMonth; this.intYear = intYear;  } 
// setter and getter methods
	void setDay(int intDay)  
	{
		this.intDay = intDay; 
	} 
	int getDay( )
	{
		return  this.intDay; 
	}  
	void setMonth(int intMonth)  
	{
		this.intMonth = intMonth;
	} 

	int getMonth( ) 
	{
		return  this.intMonth;
	} 

	void setYear(int intYear) 
	{
		this.intYear=intYear; 
	} 



	int getYear( )
	{
		return  this.intYear; 
	}  
	public String toString()
//converts date obj to string.   
	{  
		return "Date is "+ intDay+"/"+intMonth+"/" +intYear; 
	}
	public static void main(String[] args)
	{
	Date d1=new Date(12,12,2012);
	d1.setYear(2015);
	}
}// Date class 

package junitproject;

import static org.junit.Assert.*;

import org.junit.Test;


public class DateTest {

	@Test
	public void testSetDay() {
		System.out.println("From TestPerson2");
		Date d=new Date(12,11,2011);
		assertEquals(12,d.getDay());;
	}

	@Test
	public void testGetDay() {
		System.out.println("From TestPerson2");
		Date d1=new Date(12,12,2012);
		assertEquals("12",d1.getDay());
	}

	@Test
	public void testSetMonth() {
		System.out.println("From TestPerson2");
		Date d2=new Date(12,12,2012);
		assertEquals("12",d2.getMonth());
	}

	@Test
	public void testGetMonth() {
		System.out.println("From TestPerson2");
		Date d3=new Date(12,12,2012);
		assertEquals("12",d3.getMonth());
	}

	@Test
	public void testSetYear() {
		System.out.println("From TestPerson2");
		Date d4=new Date(12,12,2012);
		assertEquals("12",d4.getYear());
	}

	@Test
	public void testGetYear() {
		System.out.println("From TestPerson2");
		Date d5=new Date(12,12,2012);
		assertEquals("12",d5.getYear());
	}

	@Test
	public void testToString() {
		System.out.println("From TestPerson2");
		Date d6=new Date(12,12,2012);
		
	}

}

9.2.1: Consider the Person class created in lab assignment 2.3. This class has some members and corresponding setter and getter methods. Write test case to check the functionality of getter methods and displaydetails method
package Lab9;

 class Person {
	private String firstName;
	private String lastName;
	
	public Person(String fname, String lname)
	{
		if(fname==null&&lname==null)
		{
			throw new IllegalArgumentException("Both Names Cannot be NULL");
		}
		this.firstName=fname;
		this.lastName=lname;
	}
	public String getFullname()
	{
		String first=(this.firstName!=null)?this.firstName:"?";
		String last=(this.lastName!=null)?this.lastName:"?";
		return first+" "+last;
	}
	public String getFirstName() {
		return firstName;
	}
	
	public String getLastName() {
		return lastName;
	}
}
package Lab9;

import org.junit.*;
import static org.junit.Assert.*;
import org.junit.Test;

//import junitproject.Person;

public class TestPerson2 {
	@Test
	public void testPerson()
	{
		
	}
	@Test
	public void testGetFirstName()
	{
		System.out.println("From TestPerson2");
		Person per=new Person("Robert","King");
		assertEquals("Robert",per.getFirstName());
	}
	@Test
	public void testGetLastName()
	{
		System.out.println("From TestPerson2");
		Person per=new Person("Robert","King");
		assertEquals("King",per.getLastName());
	}
	@Test
	public void testGetFullName()
	{
		System.out.println("From TestPerson2");
		Person per=new Person("Robert","King");
		assertEquals("Robert King",per.getFullname());
	}
	@Test(expected= IllegalArgumentException.class)
	public void testNullslnName()
	{
		System.out.println("from TestPerson2 testing exceptions");
		Person per1=new Person(null,null);
	}
	

}
9.2.2: Consider the lab assignment 6.3 from Exception Handling Lab. Create a new class ExceptionCheck.javawhich handles an exception. Write a test case to verify if the exception is being handled correctly.

package com.cg.eis.exception;

import static org.junit.Assert.*;

import org.junit.Test;

import com.cg.eis.bean.Employee;

public class ExceptionCheck {

	@Test
	public void testEmployeeException() {
		System.out.println("exception check1");
		Employee e = new Employee();
		assertEquals(12,e.getId());
	}

	@Test
	public void testEmployeeExceptionString() {
		System.out.println("exception check2");
		Employee e1 = new Employee();
		assertEquals("karthik",e1.getName());
	}

	@Test
	public void testToString() {
		System.out.println("exception check3");
		Employee e2 = new Employee();
		assertEquals("mahesh",e2.getClass().getName());
	}

	@Test
	public void testGetMessage() {
		System.out.println("exception check4");
		Employee e3 = new Employee();
		assertEquals(12,e3.getId());
	}

}
		
10.1: Write a program to store a person details in a properties file named as “PersonProps.properties” and also do the following tasks: 
a) Read data from properties file, load the data into Properties object and display the data in the console.
 b) Read data from properties file(using getProperties method) and print data in the console
package Lab10;

import java.io.FileReader;
import java.io.IOException;
import java.util.Properties;


public class PersonProps {
	
	public static void main(String args[]) throws IOException
	{
		FileReader fr=new FileReader("F:\\cap\\details.properties.txt");
		Properties p=new Properties();
		p.load(fr);
		System.out.println("Properties after loading : \n"+p);
		System.out.println("\nafter using getproperty :");
		System.out.println(p.getProperty("Name"));
		System.out.println(p.getProperty("Phno"));
	}

}






